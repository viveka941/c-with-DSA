Java Source File Structure

  class A{}
  class B{}
  class C{}


-> Many class in one java File.
-> Atmost one class one declare with should be public.
->which one is declare with public class this file 
   save java programe name.
->
class A{}
class B{}
public class C {} // this is file should be save C file name is C.java

-> there are multiple public classes this declare wiht public then is given complier error 



class A{
  public static void main(String args[]){
    System.out.println("A class main");
  }
}

class B{
  public static void main(String args[]){
    System.out.println("B class main);
  }
}

class C{
  public static void main(String args[]){
    System.out.println("C class main);
  }
}

// there are no have public class then you can give any name above class 


what is default -> within the same current package 
abstract method -> not complete , something particeal
what is abstract method
  abstract method has only declareation not 
 1. public abstract void m1(){}
 2. public void m1();
 3.public abstract void m1();✅
 4.public void m1(){};✅

 abstract class test{
  public abstract void m1();✅
  public void m1();❌❌

 }

 abstract class ->some resosns partial 
 no one create object jast partial

// Virtual function is a  member function in the case class that you redefine in th derived class.

 interfaces ->1. any service require specification (SRS) than it is provided can implelmentation
    2.any contract between clinet and service provider
    100%,pure,abstract,class
  

----------------<OOPs>--------------------
1.Data Hiding:(Encapsulation) ->outside not access data there has getter setter


abstraction->(means not complete)->hide interanl information or implelmentation
what is main purpose data Hiding(abstraction) ->security,enhancement(without effecting outside person),maintainblility(),
disadvatage > getter and setter and increase line of code , perfomence is down
example->online transfer amount (otp,card details,)
example -> ATM machine what happend in behind

Encapsulation:-all require is definen in singal unit.
every java class has Encapsulation
Encapsulation= data Hiding + abstraction;
example:- 
class Account{
  privete double balance;
  public double getBalance(){
    // valid
    return balance;
  }
  public void setBalance(double amount ){
    // validations
    this.balance=balance+amount
  }
}


Tightly Encapsulation class:

public class Account{
  private double balance;
  public double getBalance(){
    return balance;
  }
}


Inheritance
1.IS-A Relasionship
2.cole reusbliity
3.extends keyword


class P{
  public void m1(){
    System.out.println("Parrent");
  }
}
class C extends P{
  public void m2(){
     System.out.println("child");
  }
}
public class Test{
  public static voi main(String args[]){
    P p = new P();
    p.m1();✅
    p.m2();❌  //cannot find symbol

    C c = new C();
    c.m1();✅
    c.m2();✅

     P child = new C(); // not call child 
    child.m1();✅
    child.m2(); ❌ // cannot find symbol

    C child1 = new p(); ❌//error: incompatible types: 
     c.m1();
    c.m2();
  }
}

Inheritance->less code , less time,
Parrent-> common method
child-> specific method 

Object 
1.String
2.stringBuffer
3.number
4.Math
5.Throwable
          1.exception
                  1.Runtime exception
                  2.IOE exception
          2.Error



Inheritance types
1. Single Inheritance
 
  class A ---------------> class B

  class B extends A{

  }

2.Multiple Inheritance
 class A -------------------------Class B
       \                          /
        \                       / 
         \                     /
                class  C
    
3. Multi-Level
  class A ------ Class B --------- Class C 
  class A{}
  class B extends A{}
  class C extends B{}

4. Hirrarchical Inheritance
                 class A
                 /   |   \
                /    |    \
               /     |     \
       class B   class C   class D

5 Hybrid Inheritance


 two types not support in java               
  1.multiple  -> 1.Dimand Accress 2. Ambigutiy
  2. Hybrid


java provided multiple Inheritance in interfaces
not class 

class A{

}
class B{

}
class C extends A,B{ ❌ // this give error Ambigutiy

}

 
  interfaces A{

  }
  interfaces B{
    
  }
  interfaces C extends A,B{ ✅

  }


Multilevel Inheritance ()
cyclic Inheritance not support in java
 class A extends B { } ❌
 class C extends A{ }  ❌


Polymorphism->
  Overloading  
      public int m1(int i, float f)
      singnature -> m1(int,float) 

  Overriding 
     same name but different type of arguments types
     overloading occurs when methods in the same class have the same method name but different parameters, whereas overriding occurs when two methods have the same method name and parameters.

     public class Test{
      public void m1(){
        sout("no arg");
      }
      public void m1(int i){
        sout(" int arg");
      }
      public float m1( float i){
        sout("float arg");
      }

     }